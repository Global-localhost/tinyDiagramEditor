<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8">
		<title>Tiny Diagram Editor</title>
		<script src="TinyDiagramEditor.js"></script>
		<link rel="stylesheet" type="text/css" href="TinyDiagramEditor.css" />
	</head>
	<body id="body">
		<div id="actions">
			<div class="menubar_holder">
				<div class="menubar_button_new_enabled" id="buttonNew" onclick="newDiagram();"></div>
			</div>
			<div class="menubar_holder">
				<label for="fileOpener" id="buttonImport">
					<span class="menubar_button_open_enabled">&nbsp;</span>
				</label>
				<input type="file" class="menubar_buttonHidden" id="fileOpener" onChange="openDiagram(document.getElementById('fileOpener').files[0]);">
			</div>
			<div class="menubar_holder">
				<div class="menubar_button_exportdgm_enabled" onclick="exportToDGM();"></div>
			</div>
			<div class="menubar_holder">
				<div class="menubar_button_exportpng_enabled" onclick="exportToPNG();"></div>
			</div>
			<div class="menubar_separator"></div>
			<div class="menubar_holder">
				<div class="menubar_button_front_disabled" id="buttonFront" onclick="moveFront();"></div>
			</div>
			<div class="menubar_holder">
				<div class="menubar_button_back_disabled" id="buttonBack" onclick="moveBack();"></div>
			</div>
			<div class="menubar_separator"></div>
			<div class="menubar_holder">
				<div class="menubar_button_copy_disabled" id="buttonCopy" onclick="copyObject();"></div>
			</div>
			<div class="menubar_separator"></div>
			<div class="menubar_holder">
				<div class="menubar_button_undo_disabled" id="buttonUndo" onclick="getUndo();"></div>
			</div>
			<div class="menubar_holder">
				<div class="menubar_button_redo_disabled" id="buttonRedo" onclick="getRedo();"></div>
			</div>
			<div class="menubar_separator"></div>
			<div class="menubar_holder">
				<div class="menubar_button_trash_disabled" id="buttonDelete" onclick="deleteObject();"></div>
			</div>
		</div>

		<div id="editor">
			<div id="container">
				<canvas id="a" width="1920" height="1080">
					Your browser does not support HTML5. Please upgrade your browser to any modern version.
				</canvas>
				<div id="text-editor"></div>
				<div id="text-editor-tools"></div>
			</div>
		</div>

		<div id="right">
			<div id="figures">
				<script>
					function buildPanel()
						{
						var firstPanel = true;

						for(var setName in figureSets)
							{
							var set = figureSets[setName];
							var eSetDiv = document.createElement("div");
							eSetDiv.setAttribute("id", setName);
							eSetDiv.style.marginBottom = "10px";
							if(firstPanel)
								{
								firstPanel = false;
								}
								else
								{
								eSetDiv.style.display = "none";
								}

							document.getElementById("figures").appendChild(eSetDiv);

							for(var figure in set["figures"])
								{
								figure = set["figures"][figure];

								var figureFunctionName = "figure_" + figure.figureFunction;
								var figureThumbURL = "lib/sets/" + setName + "/" + figure.image;

								var eFigure = document.createElement("div");
								eFigure.className = figure.figureFunction;

								eFigure.addEventListener("mousedown", function (figureFunction, figureThumbURL)
									{
									return function(evt)
										{
										evt.preventDefault();

										setUndo(true);

										var myCanvas = document.getElementById("a");
										var myContainer = document.getElementById("container");
										var myMiddleXCanvas = (myCanvas.width / 2) + myCanvas.scrollLeft;
										var myMiddleYCanvas = (myCanvas.height / 2) + myCanvas.scrollTop;
										var myMiddleXContainer = (myContainer.offsetWidth / 2) + myContainer.scrollLeft;
										var myMiddleYContainer = (myContainer.offsetHeight / 2) + myContainer.scrollTop;
										var myMiddleX = 0;
										var myMiddleY = 0;

										if (myContainer.offsetHeight>=myCanvas.height && myContainer.offsetWidth>=myCanvas.width)
											{
											myMiddleX = myMiddleXCanvas;
											myMiddleY = myMiddleYCanvas;
											}
										else if (myContainer.offsetWidth>=myCanvas.width)
											{
											myMiddleX = myMiddleXCanvas;
											myMiddleY = myMiddleYContainer;
											}
										else if (myContainer.offsetHeight>=myCanvas.height)
											{
											myMiddleX = myMiddleXContainer;
											myMiddleY = myMiddleYCanvas;
											}
											else
											{
											myMiddleX = myMiddleXContainer;
											myMiddleY = myMiddleYContainer;
											}

										if (figureFunction=="figure_Arrow")
											{
											insertArrow(myMiddleX,myMiddleY);
											}
											else
											{
											var cmdCreateFig = new FigureCreateCommand(window[figureFunction], myMiddleX, myMiddleY);
											cmdCreateFig.execute();
											History.addUndo(cmdCreateFig);

											selectedConnectorId = -1;

											createFigureFunction = null;

											mousePressed = false;
											redraw = true;

											state = STATE_FIGURE_SELECTED;

											draw();

											document.getElementById("buttonFront").classList.add("menubar_button_front_enabled");
											document.getElementById("buttonFront").classList.remove("menubar_button_front_disabled");
											document.getElementById("buttonBack").classList.add("menubar_button_back_enabled");
											document.getElementById("buttonBack").classList.remove("menubar_button_back_disabled");
											document.getElementById("buttonCopy").classList.add("menubar_button_copy_enabled");
											document.getElementById("buttonCopy").classList.remove("menubar_button_copy_disabled");
											document.getElementById("buttonDelete").classList.add("menubar_button_trash_enabled");
											document.getElementById("buttonDelete").classList.remove("menubar_button_trash_disabled");
											}
										};
									} (figureFunctionName, figureThumbURL), false);

								eSetDiv.appendChild(eFigure);
								}
							}
						}
					buildPanel();
				</script>
			</div>

			<hr class="hr1"/>

			<div id="minimap"></div>

			<div class="label">
				<div class="label2" id="labelWidth">&nbsp;</div>
				<div class="label3"><input class="labeltext" type="text" id="widthSize" onkeydown="resizeCanvasTextBoxes(event)"></div>
			</div>

			<div class="label">
				<div class="label2" id="labelHeight">&nbsp;</div>
				<div class="label3"><input class="labeltext" type="text" id="heightSize" onkeydown="resizeCanvasTextBoxes(event)"></div>
			</div>

			<input class="labelsubmit" id="sumbitSize" type="button" value="&nbsp;" onclick="resizeCanvas()">

			<hr class="hr2"/>

			<div id="edit"></div>

		</div>

		<script>
			var userLanguage = window.navigator.userLanguage || window.navigator.language;

			var STRING_WIDTH = "";
			var STRING_HEIGHT = "";
			var STRING_UPDATE = "";
			var STRING_CHANGEIMAGE = "";
			var STRING_CHANGEIMAGE_ERROR = "";
			var STRING_DOWNLOADIMAGE = "";
			var STRING_TEXT = "";
			var STRING_BACKGROUND_COLOR = "";
			var STRING_BORDER_COLOR = "";
			var STRING_BORDER_WIDTH = "";
			var STRING_BORDER_STYLE = "";
			var STRING_ERROR_LOSECHANGES = "";
			var STRING_ERROR_FORMAT = "";
			var STRING_DELETE_WARNING = "";

			if (userLanguage.substring(0,2)=="es")
				{
				STRING_WIDTH = "Ancho (px):";
				STRING_HEIGHT = "Alto (px):";
				STRING_UPDATE = "Actualizar tama\u00F1o";
				STRING_CHANGEIMAGE = "Cambiar imagen";
				STRING_CHANGEIMAGE_ERROR = "El archivo debe estar en formato JPG o PNG.";
				STRING_DOWNLOADIMAGE = "Descargar imagen";
				STRING_TEXT = "Texto";
				STRING_BACKGROUND_COLOR = "Color del fondo:";
				STRING_BORDER_COLOR = "Color del borde:";
				STRING_BORDER_WIDTH = "Ancho del borde:";
				STRING_BORDER_STYLE = "Estilo del borde:";
				STRING_ERROR_LOSECHANGES = "\u00BFPerder cualquier cambio no guardado?";
				STRING_ERROR_FORMAT = "ERROR: Por favor verifique que el archivo se encuentre en formato DGM.";
				STRING_DELETE_WARNING = "\u00BFDesea eliminar la figura seleccionada?";
				}
				else
				{
				STRING_WIDTH = "Width (px):";
				STRING_HEIGHT = "Height (px):";
				STRING_UPDATE = "Update size";
				STRING_CHANGEIMAGE = "Change image";
				STRING_CHANGEIMAGE_ERROR = "The file must be in JPG or PNG format.";
				STRING_DOWNLOADIMAGE = "Download image";
				STRING_TEXT = "Text";
				STRING_BACKGROUND_COLOR = "Background color:";
				STRING_BORDER_COLOR = "Border color:";
				STRING_BORDER_WIDTH = "Border width:";
				STRING_BORDER_STYLE = "Border style:";
				STRING_ERROR_LOSECHANGES = "Lose any unsaved changes?";
				STRING_ERROR_FORMAT = "ERROR: Please check that the file is in DGM format.";
				STRING_DELETE_WARNING = "Delete the selected figure?";
				}

			document.getElementById("labelWidth").innerHTML = STRING_WIDTH;
			document.getElementById("labelHeight").innerHTML = STRING_HEIGHT;
			document.getElementById("sumbitSize").value = STRING_UPDATE;

			var sceneUndo01 = -1;
			var sceneUndo02 = -1;
			var sceneUndo03 = -1;
			var sceneUndo04 = -1;
			var sceneUndo05 = -1;
			var sceneUndo06 = -1;
			var sceneUndo07 = -1;
			var sceneUndo08 = -1;
			var sceneUndo09 = -1;
			var sceneUndo10 = -1;

			var sceneRedo01 = -1;
			var sceneRedo02 = -1;
			var sceneRedo03 = -1;
			var sceneRedo04 = -1;
			var sceneRedo05 = -1;
			var sceneRedo06 = -1;
			var sceneRedo07 = -1;
			var sceneRedo08 = -1;
			var sceneRedo09 = -1;
			var sceneRedo10 = -1;

			function setUndo(a)
				{
				var diagram = { c: canvasProps, s:STACK, m:CONNECTOR_MANAGER, p:CONTAINER_MANAGER, v: DIAGRAMO.fileVersion };
				var serializedDiagram = JSON.stringify(diagram);

				if (sceneUndo01==-1)		{sceneUndo01 = serializedDiagram;}
				else if (sceneUndo02==-1)	{sceneUndo02 = serializedDiagram;}
				else if (sceneUndo03==-1)	{sceneUndo03 = serializedDiagram;}
				else if (sceneUndo04==-1)	{sceneUndo04 = serializedDiagram;}
				else if (sceneUndo05==-1)	{sceneUndo05 = serializedDiagram;}
				else if (sceneUndo06==-1)	{sceneUndo06 = serializedDiagram;}
				else if (sceneUndo07==-1)	{sceneUndo07 = serializedDiagram;}
				else if (sceneUndo08==-1)	{sceneUndo08 = serializedDiagram;}
				else if (sceneUndo09==-1)	{sceneUndo09 = serializedDiagram;}
				else if (sceneUndo10==-1)	{sceneUndo10 = serializedDiagram;}
				else
					{
					sceneUndo01 = sceneUndo02;
					sceneUndo02 = sceneUndo03;
					sceneUndo03 = sceneUndo04;
					sceneUndo04 = sceneUndo05;
					sceneUndo05 = sceneUndo06;
					sceneUndo06 = sceneUndo07;
					sceneUndo07 = sceneUndo08;
					sceneUndo08 = sceneUndo09;
					sceneUndo09 = sceneUndo10;
					sceneUndo10 = serializedDiagram;
					}

				// CLEARING REDO IF A NEW ACTION WAS EXECUTED
				if (a==true)
					{
					sceneRedo01 = -1;
					sceneRedo02 = -1;
					sceneRedo03 = -1;
					sceneRedo04 = -1;
					sceneRedo05 = -1;
					sceneRedo06 = -1;
					sceneRedo07 = -1;
					sceneRedo08 = -1;
					sceneRedo09 = -1;
					sceneRedo10 = -1;

					document.getElementById("buttonRedo").classList.add("menubar_button_redo_disabled");
					document.getElementById("buttonRedo").classList.remove("menubar_button_redo_enabled");
					}

				document.getElementById("buttonUndo").classList.add("menubar_button_undo_enabled");
				document.getElementById("buttonUndo").classList.remove("menubar_button_undo_disabled");
				}

			function setRedo()
				{
				var diagram = { c: canvasProps, s:STACK, m:CONNECTOR_MANAGER, p:CONTAINER_MANAGER, v: DIAGRAMO.fileVersion };
				var serializedDiagram = JSON.stringify(diagram);

				if (sceneRedo01==-1)		{sceneRedo01 = serializedDiagram;}
				else if (sceneRedo02==-1)	{sceneRedo02 = serializedDiagram;}
				else if (sceneRedo03==-1)	{sceneRedo03 = serializedDiagram;}
				else if (sceneRedo04==-1)	{sceneRedo04 = serializedDiagram;}
				else if (sceneRedo05==-1)	{sceneRedo05 = serializedDiagram;}
				else if (sceneRedo06==-1)	{sceneRedo06 = serializedDiagram;}
				else if (sceneRedo07==-1)	{sceneRedo07 = serializedDiagram;}
				else if (sceneRedo08==-1)	{sceneRedo08 = serializedDiagram;}
				else if (sceneRedo09==-1)	{sceneRedo09 = serializedDiagram;}
				else if (sceneRedo10==-1)	{sceneRedo10 = serializedDiagram;}
				else
					{
					sceneRedo01 = sceneRedo02;
					sceneRedo02 = sceneRedo03;
					sceneRedo03 = sceneRedo04;
					sceneRedo04 = sceneRedo05;
					sceneRedo05 = sceneRedo06;
					sceneRedo06 = sceneRedo07;
					sceneRedo07 = sceneRedo08;
					sceneRedo08 = sceneRedo09;
					sceneRedo09 = sceneRedo10;
					sceneRedo10 = serializedDiagram;
					}

				document.getElementById("buttonRedo").classList.add("menubar_button_redo_enabled");
				document.getElementById("buttonRedo").classList.remove("menubar_button_redo_disabled");
				}

			function getUndo()
				{
				var selectedUndo = - 1;
				var contents = -1;

				if (sceneUndo10!=-1)		{contents = sceneUndo10;selectedUndo = 10;}
				else if (sceneUndo09!=-1)	{contents = sceneUndo09;selectedUndo = 9;}
				else if (sceneUndo08!=-1)	{contents = sceneUndo08;selectedUndo = 8;}
				else if (sceneUndo07!=-1)	{contents = sceneUndo07;selectedUndo = 7;}
				else if (sceneUndo06!=-1)	{contents = sceneUndo06;selectedUndo = 6;}
				else if (sceneUndo05!=-1)	{contents = sceneUndo05;selectedUndo = 5;}
				else if (sceneUndo04!=-1)	{contents = sceneUndo04;selectedUndo = 4;}
				else if (sceneUndo03!=-1)	{contents = sceneUndo03;selectedUndo = 3;}
				else if (sceneUndo02!=-1)	{contents = sceneUndo02;selectedUndo = 2;}
				else if (sceneUndo01!=-1)	{contents = sceneUndo01;selectedUndo = 1;}

				if (contents != -1)
					{
					setRedo();

					loadDiagramFile(contents,false);

					var myCanvas = document.getElementById("a");
					var inputWidth = document.getElementById("widthSize");
					var inputHeight = document.getElementById("heightSize");
					inputWidth.value = myCanvas.width;
					inputHeight.value = myCanvas.height;

					if (selectedUndo==10)	 {sceneUndo10 = -1;}
					else if (selectedUndo==9){sceneUndo09 = -1;}
					else if (selectedUndo==8){sceneUndo08 = -1;}
					else if (selectedUndo==7){sceneUndo07 = -1;}
					else if (selectedUndo==6){sceneUndo06 = -1;}
					else if (selectedUndo==5){sceneUndo05 = -1;}
					else if (selectedUndo==4){sceneUndo04 = -1;}
					else if (selectedUndo==3){sceneUndo03 = -1;}
					else if (selectedUndo==2){sceneUndo02 = -1;}
					else if (selectedUndo==1){sceneUndo01 = -1;
											  document.getElementById("buttonUndo").classList.add("menubar_button_undo_disabled");
											  document.getElementById("buttonUndo").classList.remove("menubar_button_undo_enabled");
											}
					}
				}

			function getRedo()
				{
				var selectedRedo = - 1;
				var contents = -1;

				if (sceneRedo10!=-1)		{contents = sceneRedo10;selectedRedo = 10;}
				else if (sceneRedo09!=-1)	{contents = sceneRedo09;selectedRedo = 9;}
				else if (sceneRedo08!=-1)	{contents = sceneRedo08;selectedRedo = 8;}
				else if (sceneRedo07!=-1)	{contents = sceneRedo07;selectedRedo = 7;}
				else if (sceneRedo06!=-1)	{contents = sceneRedo06;selectedRedo = 6;}
				else if (sceneRedo05!=-1)	{contents = sceneRedo05;selectedRedo = 5;}
				else if (sceneRedo04!=-1)	{contents = sceneRedo04;selectedRedo = 4;}
				else if (sceneRedo03!=-1)	{contents = sceneRedo03;selectedRedo = 3;}
				else if (sceneRedo02!=-1)	{contents = sceneRedo02;selectedRedo = 2;}
				else if (sceneRedo01!=-1)	{contents = sceneRedo01;selectedRedo = 1;}

				if (contents != -1)
					{
					setUndo(false);

					loadDiagramFile(contents,false);

					var myCanvas = document.getElementById("a");
					var inputWidth = document.getElementById("widthSize");
					var inputHeight = document.getElementById("heightSize");
					inputWidth.value = myCanvas.width;
					inputHeight.value = myCanvas.height;

					if (selectedRedo==10)	 {sceneRedo10 = -1;}
					else if (selectedRedo==9){sceneRedo09 = -1;}
					else if (selectedRedo==8){sceneRedo08 = -1;}
					else if (selectedRedo==7){sceneRedo07 = -1;}
					else if (selectedRedo==6){sceneRedo06 = -1;}
					else if (selectedRedo==5){sceneRedo05 = -1;}
					else if (selectedRedo==4){sceneRedo04 = -1;}
					else if (selectedRedo==3){sceneRedo03 = -1;}
					else if (selectedRedo==2){sceneRedo02 = -1;}
					else if (selectedRedo==1){sceneRedo01 = -1;
											  document.getElementById("buttonRedo").classList.add("menubar_button_redo_disabled");
											  document.getElementById("buttonRedo").classList.remove("menubar_button_redo_enabled");
											}
					}
				}

			window.onload = function()
				{
				var myDiv = document.getElementById("container");
				myDiv.scrollTop = 0;
				myDiv.scrollLeft = 0;

				init("");

				var myCanvas = document.getElementById("a");
				var inputWidth = document.getElementById("widthSize");
				var inputHeight = document.getElementById("heightSize");
				inputWidth.value = myCanvas.width;
				inputHeight.value = myCanvas.height;
				}

			function newDiagram()
				{
				var message = confirm(STRING_ERROR_LOSECHANGES);
				if (message == true)
					{
					newDiagramFile();
					var myCanvas = document.getElementById("a");
					var inputWidth = document.getElementById("widthSize");
					var inputHeight = document.getElementById("heightSize");
					inputWidth.value = myCanvas.width;
					inputHeight.value = myCanvas.height;
					}
				}

			function openDiagram(file)
				{
				var filename = file.name;
				var extension = filename.split(".").pop().toLowerCase();
				var reader = new FileReader();

				if (extension=="dgm")
					{
					try
						{
						reader.readAsText(file);

						reader.addEventListener("load", function (event)
							{
							var contents = event.target.result;
							loadDiagramFile(contents,true);

							var myCanvas = document.getElementById("a");
							var inputWidth = document.getElementById("widthSize");
							var inputHeight = document.getElementById("heightSize");
							inputWidth.value = myCanvas.width;
							inputHeight.value = myCanvas.height;
							});
						}
						catch(err)
						{
						alert(STRING_ERROR_FORMAT);
						}
					}
					else
					{
					alert(STRING_ERROR_FORMAT);
					}
				}

			function exportToDGM()
				{
				createFigureFunction = null;

				//deselect any figure
				selectedFigureId = -1;
				selectedConnectionPointId = -1;
				selectedConnectorId = -1;

				// clear current text editor
				if (currentTextEditor!=null)
					{
					currentTextEditor.destroy();
					currentTextEditor = null;
					}

				state = STATE_NONE;

				setUpEditPanel(null)

				draw();

				var diagram = { c: canvasProps, s:STACK, m:CONNECTOR_MANAGER, p:CONTAINER_MANAGER, v: DIAGRAMO.fileVersion };
				var serializedDiagram = JSON.stringify(diagram);
				var link = document.createElement("a");
				link.style.display = "none";
				document.body.appendChild(link);
				link.href = URL.createObjectURL(new Blob([serializedDiagram], {type:"text/plain"}));
				link.download = "Diagram.dgm";
				link.click();

				document.getElementById("buttonFront").classList.add("menubar_button_front_disabled");
				document.getElementById("buttonFront").classList.remove("menubar_button_front_enabled");
				document.getElementById("buttonBack").classList.add("menubar_button_back_disabled");
				document.getElementById("buttonBack").classList.remove("menubar_button_back_enabled");
				document.getElementById("buttonCopy").classList.add("menubar_button_copy_disabled");
				document.getElementById("buttonCopy").classList.remove("menubar_button_copy_enabled");
				document.getElementById("buttonDelete").classList.add("menubar_button_trash_disabled");
				document.getElementById("buttonDelete").classList.remove("menubar_button_trash_enabled");
				}

			function exportToPNG()
				{
				createFigureFunction = null;

				//deselect any figure
				selectedFigureId = -1;
				selectedConnectionPointId = -1;
				selectedConnectorId = -1;

				// clear current text editor
				if (currentTextEditor!=null)
					{
					currentTextEditor.destroy();
					currentTextEditor = null;
					}

				state = STATE_NONE;

				setUpEditPanel(null)

				draw();

				var canvasElement = document.getElementById("a");
				var imgURL = canvasElement.toDataURL("image/png");

				var dlLink = document.createElement("a");
				dlLink.style.display = "none";
				document.body.appendChild(dlLink);
				dlLink.href = imgURL;
				dlLink.download = "Diagram.png";
				dlLink.click();

				document.getElementById("buttonFront").classList.add("menubar_button_front_disabled");
				document.getElementById("buttonFront").classList.remove("menubar_button_front_enabled");
				document.getElementById("buttonBack").classList.add("menubar_button_back_disabled");
				document.getElementById("buttonBack").classList.remove("menubar_button_back_enabled");
				document.getElementById("buttonCopy").classList.add("menubar_button_copy_disabled");
				document.getElementById("buttonCopy").classList.remove("menubar_button_copy_enabled");
				document.getElementById("buttonDelete").classList.add("menubar_button_trash_disabled");
				document.getElementById("buttonDelete").classList.remove("menubar_button_trash_enabled");
				}

			function resizeCanvas()
				{
				setUndo(true);

				var inputWidth = document.getElementById("widthSize");
				var inputHeight = document.getElementById("heightSize");

				var widthVal = Number(inputWidth.value);
				if (isNaN(widthVal) || inputWidth.value=="")
					{
					widthVal = canvasProps.getWidth();
					inputWidth.value = widthVal;
					}

				var heightVal = Number(inputHeight.value);
				if (isNaN(heightVal) || inputHeight.value=="")
					{
					heightVal = canvasProps.getHeight();
					inputHeight.value = heightVal;
					}

				if(canvasProps.getWidth() !== widthVal || canvasProps.getHeight() !== heightVal)
					{
					var undo = new CanvasChangeSizeCommand(widthVal, heightVal);
					undo.execute();
					History.addUndo(undo);
					}
				draw();
				}

			function resizeCanvasTextBoxes(e)
				{
				if (e.keyCode == 13)
					{
					resizeCanvas();
					}
				}

			function insertArrow(x,y)
				{
				selectedFigureId = -1;
				state  = STATE_CONNECTOR_PICK_FIRST;
				connectorType = Connector.TYPE_STRAIGHT;
				redraw = true;

				connectorPickFirst(x - 25, y - 25, Connector.TYPE_STRAIGHT);

				draw();

				state  = STATE_CONNECTOR_PICK_SECOND;
				redraw = true;
				connectorPickSecond(x + 25, y + 25, Connector.TYPE_STRAIGHT);

				state  = STATE_CONNECTOR_SELECTED;

				var cmdCreateCon = new ConnectorCreateCommand(selectedConnectorId);
				History.addUndo(cmdCreateCon);

				draw();

				var con = CONNECTOR_MANAGER.connectorGetById(selectedConnectorId);
				setUpEditPanel(con);

				document.getElementById("buttonFront").classList.add("menubar_button_front_disabled");
				document.getElementById("buttonFront").classList.remove("menubar_button_front_enabled");
				document.getElementById("buttonBack").classList.add("menubar_button_back_disabled");
				document.getElementById("buttonBack").classList.remove("menubar_button_back_enabled");
				document.getElementById("buttonCopy").classList.add("menubar_button_copy_enabled");
				document.getElementById("buttonCopy").classList.remove("menubar_button_copy_disabled");
				document.getElementById("buttonDelete").classList.add("menubar_button_trash_enabled");
				document.getElementById("buttonDelete").classList.remove("menubar_button_trash_disabled");
				}
		</script>
	</body>
</html>